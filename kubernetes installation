#!/bin/bash

### Step 1: System Update ###
sudo apt update -y && sudo apt upgrade -y

### Step 2: Install Dependencies ###
sudo apt install -y apt-transport-https ca-certificates curl gnupg lsb-release software-properties-common

### Step 3: Install Docker ###
sudo apt install -y docker.io
sudo systemctl enable docker
sudo systemctl start docker

# Configure Docker with systemd cgroup driver
cat <<EOF | sudo tee /etc/docker/daemon.json
{
  "exec-opts": ["native.cgroupdriver=systemd"]
}
EOF

sudo systemctl daemon-reexec
sudo systemctl restart docker

### Step 4: Install Go and build cri-dockerd ###
# Remove any previous Go version
sudo rm -rf /usr/local/go

# Install Go 1.22.0
wget https://go.dev/dl/go1.22.0.linux-amd64.tar.gz
sudo tar -C /usr/local -xzf go1.22.0.linux-amd64.tar.gz
echo "export PATH=\$PATH:/usr/local/go/bin" >> ~/.profile
source ~/.profile

# Verify Go installation
go version

# Clone and build cri-dockerd
git clone https://github.com/Mirantis/cri-dockerd.git
cd cri-dockerd
mkdir bin
go build -o bin/cri-dockerd
sudo install -o root -m 0755 bin/cri-dockerd /usr/local/bin/cri-dockerd

# Setup systemd services
sudo cp -a packaging/systemd/* /etc/systemd/system/
sudo sed -i 's:/usr/bin/cri-dockerd:/usr/local/bin/cri-dockerd:' /etc/systemd/system/cri-docker.service
sudo sed -i 's:/usr/bin/cri-dockerd:/usr/local/bin/cri-dockerd:' /etc/systemd/system/cri-docker.socket
sudo systemctl daemon-reexec
sudo systemctl daemon-reload
sudo systemctl enable cri-docker.service
sudo systemctl enable --now cri-docker.socket
cd ~

### Step 5: Enable Kubernetes Networking ###
sudo modprobe br_netfilter
echo "net.bridge.bridge-nf-call-iptables=1" | sudo tee /etc/sysctl.d/k8s.conf
sudo sysctl --system

### Step 6: Install Kubernetes (v1.29.x) ###
# Create keyring directory
sudo mkdir -p /etc/apt/keyrings

# Download and add Kubernetes GPG key
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

# Add Kubernetes repo
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list

# Update and install
sudo apt update
sudo apt install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl




# Initialize the Kubernetes control plane
sudo kubeadm init \
  --cri-socket=unix:///var/run/cri-dockerd.sock \
  --pod-network-cidr=192.168.0.0/16

# Configure kubectl access for regular user
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

# Deploy Pod Network (Calico or Flannel, for example):
kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml


# Join the cluster (change IP, token, and hash accordingly)
sudo kubeadm join 172.31.94.156:6443 \
  --token 7xqc2a.z9eqcuepctpajupl \
  --discovery-token-ca-cert-hash sha256:3c13bd610dcb8f5c68f85d22505aaafc2c97030b6bbdbc1b8f8bafaf0b96da66 \
  --cri-socket unix:///var/run/cri-dockerd.sock




Master Node Ports
6443 ‚Äì Kubernetes API server

2379-2380 ‚Äì etcd server (only if etcd is running locally)

10250 ‚Äì Kubelet API

10257 ‚Äì kube-controller-manager

10259 ‚Äì kube-scheduler

30000-32767 ‚Äì NodePort Services (optional, for external access to apps)

‚úÖ Worker Node Ports
10250 ‚Äì Kubelet API

30000-32767 ‚Äì NodePort Services

10255 ‚Äì Read-only Kubelet (deprecated; usually disabled)

6783 ‚Äì (Weave Net CNI ‚Äì TCP/UDP)

8472 ‚Äì (Flannel CNI ‚Äì UDP)

4789 ‚Äì (Flannel vxLAN / Calico vxLAN ‚Äì UDP)

179 ‚Äì (Calico BGP mode ‚Äì TCP)

üîÅ Inter-Node Communication
All nodes should allow:

10250 ‚Äì Kubelet API (TCP)

30000-32767 ‚Äì NodePort (TCP)

Depending on the CNI Plugin:

4789 (UDP) ‚Äì Flannel/Calico vxLAN

8472 (UDP) ‚Äì Flannel

179 (TCP) ‚Äì Calico BGP

6783 (TCP/UDP) ‚Äì Weave Net
